= vidibus-routing_error

This gem is part of the open source SOA framework Vidibus: http://www.vidibus.org

Catches ActionController::RoutingError which does not work with Rails 3 out of the box. It basically catches the exception on Rack-level and re-raises it on application-level.


== Installation

Add the dependency to the Gemfile of your application:

  gem "vidibus-routing_error"

Then call bundle install on your console.


== Usage

With this gem installed, you are able to handle errors like in past versions of Rails:

  class ApplicationController < ActionController::Base
    rescue_from ActionController::RoutingError, :with => :rescue_404

    def rescue_404
      # do something
      # IMPORTANT: If you modify this method, you have to restart the server.
    end
  end

Keep in mind that you have to restart your server when changing the rescue-method!


== Possible issues

Depending on the structure of your application, you might get an error in development like this:

  TypeError (User can't be referred)

This error is caused by some caching-reloading madness: The middleware implanted by this gem is cached. But in development, your classes usually aren't. Thus some classes may not be available under certain circumstances, e.g. if you are using before filters for user authentication. You should be able to get rid of the error above by turning on class caching. Try it (and restart the server afterwards):

  # development.rb
  config.cache_classes = true

If the error is gone, you're lucky as I am. But since it is not feasible to cache classes in development, turn off class caching again and explicitly require the class that couldn't be referred. In my case, it's the user class:

  # top of development.rb
  require "app/models/user"


== Copyright

Copyright (c) 2010 Andre Pankratz. See LICENSE for details.


== Thank you!

The development of this gem was sponsored by KÃ¤uferportal: http://www.kaeuferportal.de
